include::urls.txt[]

REMOTES[[REMOTES]]
------------------

The name of one of the following can be used instead
of a URL as `<repository>` argument:

* a remote in the Git configuration file: `$GIT_DIR/config`,
* a file in the `$GIT_DIR/remotes` directory, or
* a file in the `$GIT_DIR/branches` directory.

All of these also allow you to omit the refspec from the command line
because they each contain a refspec which git will use by default.

Named remote in configuration file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can choose to provide the name of a remote which you had previously
configured using linkgit:git-remote[1], linkgit:git-config[1]
or even by a manual edit to the `$GIT_DIR/config` file.  The URL of
this remote will be used to access the repository.  The refspec
of this remote will be used by default when you do
not provide a refspec on the command line.  The entry in the
config file would appear like this:

------------
	[remote "<name>"]
		url = <url>
		pushurl = <pushurl>
		push = <refspec>
		fetch = <refspec>
------------

The `<pushurl>` is used for pushes only. It is optional and defaults
to `<url>`.

Named file in `$GIT_DIR/remotes`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can choose to provide the name of a
file in `$GIT_DIR/remotes`.  The URL
in this file will be used to access the repository.  The refspec
in this file will be used as default when you do not
provide a refspec on the command line.  This file should have the
following format:

------------
	URL: one of the above URL format
	Push: <refspec>
	Pull: <refspec>

------------

`Push:` lines are used by 'git push' and
`Pull:` lines are used by 'git pull' and 'git fetch'.
Multiple `Push:` and `Pull:` lines may
be specified for additional branch mappings.

Named file in `$GIT_DIR/branches`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can choose to provide the name of a
file in `$GIT_DIR/branches`.
The URL in this file will be used to access the repository.
This file should have the following format:


------------
	<url>#<head>
------------

`<url>` is required; `#<head>` is optional.

Depending on the operation, git will use one of the following
refspecs, if you don't provide one on the command line.
`<branch>` is the name of this file in `$GIT_DIR/branches` and
`<head>` defaults to `master`.

git fetch uses:

------------
	refs/heads/<head>:refs/heads/<branch>
------------

git push uses:

------------
	HEAD:refs/heads/<head>
------------

Denying pushes to the wrong remotes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you fear accidental pushes to the wrong remotes, you can use the
blacklist/whitelist feature. The goal is to catch pushes to unwanted
remotes before they happen.

The simplest way to forbid pushes to a remote is to add its url in the
config file under the `remote.pushBlacklist` variable.  A more
restrictive way is to change `remote.pushDefaultPolicy` to 'deny',
thus denying pushes to every remote not whitelisted. You can then add
the right remotes under `remote.pushWhitelist`.

A local path must be absolute.

You can also configure more advanced acceptance/denial behavior
following this rule: the more the url in the config prefixes the asked
url the more priority it has.

For example, if we set up the configuration variables like this:

-------------------------------
git config --add remote.pushBlacklist example.com
git config --add remote.pushWhitelist example.com/Special_Path
-------------------------------

Pushes like this  will be accepted:
-------------------------------
git push example.com/Special_Path/Sub_Directory
-------------------------------

While this one for example will be denied:
-------------------------------
git push example.com/Other_Path/
-------------------------------

`remote.pushBlacklist` and `remote.pushWhitelist` are multi-valued
variables, hence you can more than one element using `git config
--add`.

Specific schemes can also be denied. For example:

-------------------------------
git config --add remote.pushBlacklist http://example.com
-------------------------------

By doing so, only pushes to `example.com` using 'http' will be denied,
whereas other will be allowed, like 'https'. If you want to deny all
pushes to a certain repo, don't put scheme at the beginning.

Additionally, you can configure the message printed when a push is
denied with the 'remote.pushDenyMessage' configuration variable.

You can dismiss this process by using '--no-verify'.

An error will be raised if the url is blacklisted and whitelisted at
the same time.




